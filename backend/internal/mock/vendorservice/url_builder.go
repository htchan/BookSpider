// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/htchan/BookSpider/internal/vendorservice (interfaces: BookURLBuilder)

// Package mockvendorservice is a generated GoMock package.
package mockvendorservice

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBookURLBuilder is a mock of BookURLBuilder interface.
type MockBookURLBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockBookURLBuilderMockRecorder
}

// MockBookURLBuilderMockRecorder is the mock recorder for MockBookURLBuilder.
type MockBookURLBuilderMockRecorder struct {
	mock *MockBookURLBuilder
}

// NewMockBookURLBuilder creates a new mock instance.
func NewMockBookURLBuilder(ctrl *gomock.Controller) *MockBookURLBuilder {
	mock := &MockBookURLBuilder{ctrl: ctrl}
	mock.recorder = &MockBookURLBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookURLBuilder) EXPECT() *MockBookURLBuilderMockRecorder {
	return m.recorder
}

// AvailabilityURL mocks base method.
func (m *MockBookURLBuilder) AvailabilityURL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AvailabilityURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// AvailabilityURL indicates an expected call of AvailabilityURL.
func (mr *MockBookURLBuilderMockRecorder) AvailabilityURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AvailabilityURL", reflect.TypeOf((*MockBookURLBuilder)(nil).AvailabilityURL))
}

// BookURL mocks base method.
func (m *MockBookURLBuilder) BookURL(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BookURL", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// BookURL indicates an expected call of BookURL.
func (mr *MockBookURLBuilderMockRecorder) BookURL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BookURL", reflect.TypeOf((*MockBookURLBuilder)(nil).BookURL), arg0)
}

// ChapterListURL mocks base method.
func (m *MockBookURLBuilder) ChapterListURL(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChapterListURL", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// ChapterListURL indicates an expected call of ChapterListURL.
func (mr *MockBookURLBuilderMockRecorder) ChapterListURL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChapterListURL", reflect.TypeOf((*MockBookURLBuilder)(nil).ChapterListURL), arg0)
}

// ChapterURL mocks base method.
func (m *MockBookURLBuilder) ChapterURL(arg0 ...string) string {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChapterURL", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// ChapterURL indicates an expected call of ChapterURL.
func (mr *MockBookURLBuilderMockRecorder) ChapterURL(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChapterURL", reflect.TypeOf((*MockBookURLBuilder)(nil).ChapterURL), arg0...)
}
