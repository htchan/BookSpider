// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository.go

// Package mock is a generated GoMock package.
package mock

import (
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/htchan/BookSpider/internal/model"
	repo "github.com/htchan/BookSpider/internal/repo"
)

// MockRepostory is a mock of Repostory interface.
type MockRepostory struct {
	ctrl     *gomock.Controller
	recorder *MockRepostoryMockRecorder
}

// MockRepostoryMockRecorder is the mock recorder for MockRepostory.
type MockRepostoryMockRecorder struct {
	mock *MockRepostory
}

// NewMockRepostory creates a new mock instance.
func NewMockRepostory(ctrl *gomock.Controller) *MockRepostory {
	mock := &MockRepostory{ctrl: ctrl}
	mock.recorder = &MockRepostoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepostory) EXPECT() *MockRepostoryMockRecorder {
	return m.recorder
}

// Backup mocks base method.
func (m *MockRepostory) Backup(path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Backup", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// Backup indicates an expected call of Backup.
func (mr *MockRepostoryMockRecorder) Backup(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Backup", reflect.TypeOf((*MockRepostory)(nil).Backup), path)
}

// Close mocks base method.
func (m *MockRepostory) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockRepostoryMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRepostory)(nil).Close))
}

// CreateBook mocks base method.
func (m *MockRepostory) CreateBook(arg0 *model.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBook", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBook indicates an expected call of CreateBook.
func (mr *MockRepostoryMockRecorder) CreateBook(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBook", reflect.TypeOf((*MockRepostory)(nil).CreateBook), arg0)
}

// DBStats mocks base method.
func (m *MockRepostory) DBStats() sql.DBStats {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DBStats")
	ret0, _ := ret[0].(sql.DBStats)
	return ret0
}

// DBStats indicates an expected call of DBStats.
func (mr *MockRepostoryMockRecorder) DBStats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DBStats", reflect.TypeOf((*MockRepostory)(nil).DBStats))
}

// FindAllBooks mocks base method.
func (m *MockRepostory) FindAllBooks() (<-chan model.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllBooks")
	ret0, _ := ret[0].(<-chan model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllBooks indicates an expected call of FindAllBooks.
func (mr *MockRepostoryMockRecorder) FindAllBooks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllBooks", reflect.TypeOf((*MockRepostory)(nil).FindAllBooks))
}

// FindBookById mocks base method.
func (m *MockRepostory) FindBookById(id int) (*model.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBookById", id)
	ret0, _ := ret[0].(*model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBookById indicates an expected call of FindBookById.
func (mr *MockRepostoryMockRecorder) FindBookById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBookById", reflect.TypeOf((*MockRepostory)(nil).FindBookById), id)
}

// FindBookByIdHash mocks base method.
func (m *MockRepostory) FindBookByIdHash(id, hash int) (*model.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBookByIdHash", id, hash)
	ret0, _ := ret[0].(*model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBookByIdHash indicates an expected call of FindBookByIdHash.
func (mr *MockRepostoryMockRecorder) FindBookByIdHash(id, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBookByIdHash", reflect.TypeOf((*MockRepostory)(nil).FindBookByIdHash), id, hash)
}

// FindBookGroupByID mocks base method.
func (m *MockRepostory) FindBookGroupByID(id int) (model.BookGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBookGroupByID", id)
	ret0, _ := ret[0].(model.BookGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBookGroupByID indicates an expected call of FindBookGroupByID.
func (mr *MockRepostoryMockRecorder) FindBookGroupByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBookGroupByID", reflect.TypeOf((*MockRepostory)(nil).FindBookGroupByID), id)
}

// FindBookGroupByIDHash mocks base method.
func (m *MockRepostory) FindBookGroupByIDHash(id, hashCode int) (model.BookGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBookGroupByIDHash", id, hashCode)
	ret0, _ := ret[0].(model.BookGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBookGroupByIDHash indicates an expected call of FindBookGroupByIDHash.
func (mr *MockRepostoryMockRecorder) FindBookGroupByIDHash(id, hashCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBookGroupByIDHash", reflect.TypeOf((*MockRepostory)(nil).FindBookGroupByIDHash), id, hashCode)
}

// FindBooksByRandom mocks base method.
func (m *MockRepostory) FindBooksByRandom(limit int) ([]model.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBooksByRandom", limit)
	ret0, _ := ret[0].([]model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBooksByRandom indicates an expected call of FindBooksByRandom.
func (mr *MockRepostoryMockRecorder) FindBooksByRandom(limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBooksByRandom", reflect.TypeOf((*MockRepostory)(nil).FindBooksByRandom), limit)
}

// FindBooksByStatus mocks base method.
func (m *MockRepostory) FindBooksByStatus(status model.StatusCode) (<-chan model.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBooksByStatus", status)
	ret0, _ := ret[0].(<-chan model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBooksByStatus indicates an expected call of FindBooksByStatus.
func (mr *MockRepostoryMockRecorder) FindBooksByStatus(status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBooksByStatus", reflect.TypeOf((*MockRepostory)(nil).FindBooksByStatus), status)
}

// FindBooksByTitleWriter mocks base method.
func (m *MockRepostory) FindBooksByTitleWriter(title, writer string, limit, offset int) ([]model.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBooksByTitleWriter", title, writer, limit, offset)
	ret0, _ := ret[0].([]model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBooksByTitleWriter indicates an expected call of FindBooksByTitleWriter.
func (mr *MockRepostoryMockRecorder) FindBooksByTitleWriter(title, writer, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBooksByTitleWriter", reflect.TypeOf((*MockRepostory)(nil).FindBooksByTitleWriter), title, writer, limit, offset)
}

// FindBooksForDownload mocks base method.
func (m *MockRepostory) FindBooksForDownload() (<-chan model.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBooksForDownload")
	ret0, _ := ret[0].(<-chan model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBooksForDownload indicates an expected call of FindBooksForDownload.
func (mr *MockRepostoryMockRecorder) FindBooksForDownload() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBooksForDownload", reflect.TypeOf((*MockRepostory)(nil).FindBooksForDownload))
}

// FindBooksForUpdate mocks base method.
func (m *MockRepostory) FindBooksForUpdate() (<-chan model.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBooksForUpdate")
	ret0, _ := ret[0].(<-chan model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBooksForUpdate indicates an expected call of FindBooksForUpdate.
func (mr *MockRepostoryMockRecorder) FindBooksForUpdate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBooksForUpdate", reflect.TypeOf((*MockRepostory)(nil).FindBooksForUpdate))
}

// SaveError mocks base method.
func (m *MockRepostory) SaveError(arg0 *model.Book, arg1 error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveError", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveError indicates an expected call of SaveError.
func (mr *MockRepostoryMockRecorder) SaveError(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveError", reflect.TypeOf((*MockRepostory)(nil).SaveError), arg0, arg1)
}

// SaveWriter mocks base method.
func (m *MockRepostory) SaveWriter(arg0 *model.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveWriter", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveWriter indicates an expected call of SaveWriter.
func (mr *MockRepostoryMockRecorder) SaveWriter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveWriter", reflect.TypeOf((*MockRepostory)(nil).SaveWriter), arg0)
}

// Stats mocks base method.
func (m *MockRepostory) Stats() repo.Summary {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stats")
	ret0, _ := ret[0].(repo.Summary)
	return ret0
}

// Stats indicates an expected call of Stats.
func (mr *MockRepostoryMockRecorder) Stats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stats", reflect.TypeOf((*MockRepostory)(nil).Stats))
}

// UpdateBook mocks base method.
func (m *MockRepostory) UpdateBook(arg0 *model.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBook", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBook indicates an expected call of UpdateBook.
func (mr *MockRepostoryMockRecorder) UpdateBook(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBook", reflect.TypeOf((*MockRepostory)(nil).UpdateBook), arg0)
}

// UpdateBooksStatus mocks base method.
func (m *MockRepostory) UpdateBooksStatus() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBooksStatus")
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBooksStatus indicates an expected call of UpdateBooksStatus.
func (mr *MockRepostoryMockRecorder) UpdateBooksStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBooksStatus", reflect.TypeOf((*MockRepostory)(nil).UpdateBooksStatus))
}
