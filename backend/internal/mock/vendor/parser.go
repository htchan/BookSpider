// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/htchan/BookSpider/internal/vendor (interfaces: Parser)

// Package mockvendor is a generated GoMock package.
package mockvendor

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	vendor "github.com/htchan/BookSpider/internal/vendor"
)

// MockParser is a mock of Parser interface.
type MockParser struct {
	ctrl     *gomock.Controller
	recorder *MockParserMockRecorder
}

// MockParserMockRecorder is the mock recorder for MockParser.
type MockParserMockRecorder struct {
	mock *MockParser
}

// NewMockParser creates a new mock instance.
func NewMockParser(ctrl *gomock.Controller) *MockParser {
	mock := &MockParser{ctrl: ctrl}
	mock.recorder = &MockParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParser) EXPECT() *MockParserMockRecorder {
	return m.recorder
}

// FindMissingIds mocks base method.
func (m *MockParser) FindMissingIds(arg0 []int) []int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMissingIds", arg0)
	ret0, _ := ret[0].([]int)
	return ret0
}

// FindMissingIds indicates an expected call of FindMissingIds.
func (mr *MockParserMockRecorder) FindMissingIds(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMissingIds", reflect.TypeOf((*MockParser)(nil).FindMissingIds), arg0)
}

// IsAvailable mocks base method.
func (m *MockParser) IsAvailable(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAvailable", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAvailable indicates an expected call of IsAvailable.
func (mr *MockParserMockRecorder) IsAvailable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAvailable", reflect.TypeOf((*MockParser)(nil).IsAvailable), arg0)
}

// ParseBook mocks base method.
func (m *MockParser) ParseBook(arg0 string) (*vendor.BookInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseBook", arg0)
	ret0, _ := ret[0].(*vendor.BookInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseBook indicates an expected call of ParseBook.
func (mr *MockParserMockRecorder) ParseBook(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseBook", reflect.TypeOf((*MockParser)(nil).ParseBook), arg0)
}

// ParseChapter mocks base method.
func (m *MockParser) ParseChapter(arg0 string) (*vendor.ChapterInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseChapter", arg0)
	ret0, _ := ret[0].(*vendor.ChapterInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseChapter indicates an expected call of ParseChapter.
func (mr *MockParserMockRecorder) ParseChapter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseChapter", reflect.TypeOf((*MockParser)(nil).ParseChapter), arg0)
}

// ParseChapterList mocks base method.
func (m *MockParser) ParseChapterList(arg0 string) (vendor.ChapterList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseChapterList", arg0)
	ret0, _ := ret[0].(vendor.ChapterList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseChapterList indicates an expected call of ParseChapterList.
func (mr *MockParserMockRecorder) ParseChapterList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseChapterList", reflect.TypeOf((*MockParser)(nil).ParseChapterList), arg0)
}
