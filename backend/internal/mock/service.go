// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service_new/service.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/htchan/BookSpider/internal/model"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Backup mocks base method.
func (m *MockService) Backup() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Backup")
	ret0, _ := ret[0].(error)
	return ret0
}

// Backup indicates an expected call of Backup.
func (mr *MockServiceMockRecorder) Backup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Backup", reflect.TypeOf((*MockService)(nil).Backup))
}

// Book mocks base method.
func (m *MockService) Book(id int, hash string) (*model.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Book", id, hash)
	ret0, _ := ret[0].(*model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Book indicates an expected call of Book.
func (mr *MockServiceMockRecorder) Book(id, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Book", reflect.TypeOf((*MockService)(nil).Book), id, hash)
}

// BookContent mocks base method.
func (m *MockService) BookContent(arg0 *model.Book) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BookContent", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BookContent indicates an expected call of BookContent.
func (mr *MockServiceMockRecorder) BookContent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BookContent", reflect.TypeOf((*MockService)(nil).BookContent), arg0)
}

// Check mocks base method.
func (m *MockService) Check() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check")
	ret0, _ := ret[0].(error)
	return ret0
}

// Check indicates an expected call of Check.
func (mr *MockServiceMockRecorder) Check() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockService)(nil).Check))
}

// CheckAvailability mocks base method.
func (m *MockService) CheckAvailability() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAvailability")
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckAvailability indicates an expected call of CheckAvailability.
func (mr *MockServiceMockRecorder) CheckAvailability() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAvailability", reflect.TypeOf((*MockService)(nil).CheckAvailability))
}

// Download mocks base method.
func (m *MockService) Download() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Download")
	ret0, _ := ret[0].(error)
	return ret0
}

// Download indicates an expected call of Download.
func (mr *MockServiceMockRecorder) Download() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Download", reflect.TypeOf((*MockService)(nil).Download))
}

// DownloadBook mocks base method.
func (m *MockService) DownloadBook(arg0 *model.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadBook", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DownloadBook indicates an expected call of DownloadBook.
func (mr *MockServiceMockRecorder) DownloadBook(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadBook", reflect.TypeOf((*MockService)(nil).DownloadBook), arg0)
}

// Explore mocks base method.
func (m *MockService) Explore() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Explore")
	ret0, _ := ret[0].(error)
	return ret0
}

// Explore indicates an expected call of Explore.
func (mr *MockServiceMockRecorder) Explore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Explore", reflect.TypeOf((*MockService)(nil).Explore))
}

// ExploreBook mocks base method.
func (m *MockService) ExploreBook(arg0 *model.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExploreBook", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExploreBook indicates an expected call of ExploreBook.
func (mr *MockServiceMockRecorder) ExploreBook(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExploreBook", reflect.TypeOf((*MockService)(nil).ExploreBook), arg0)
}

// Info mocks base method.
func (m *MockService) Info(arg0 *model.Book) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// Info indicates an expected call of Info.
func (mr *MockServiceMockRecorder) Info(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockService)(nil).Info), arg0)
}

// PatchMissingRecords mocks base method.
func (m *MockService) PatchMissingRecords() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchMissingRecords")
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchMissingRecords indicates an expected call of PatchMissingRecords.
func (mr *MockServiceMockRecorder) PatchMissingRecords() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchMissingRecords", reflect.TypeOf((*MockService)(nil).PatchMissingRecords))
}

// PatchStatus mocks base method.
func (m *MockService) PatchStatus() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchStatus")
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchStatus indicates an expected call of PatchStatus.
func (mr *MockServiceMockRecorder) PatchStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchStatus", reflect.TypeOf((*MockService)(nil).PatchStatus))
}

// Process mocks base method.
func (m *MockService) Process() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process")
	ret0, _ := ret[0].(error)
	return ret0
}

// Process indicates an expected call of Process.
func (mr *MockServiceMockRecorder) Process() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockService)(nil).Process))
}

// ProcessBook mocks base method.
func (m *MockService) ProcessBook(arg0 *model.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessBook", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessBook indicates an expected call of ProcessBook.
func (mr *MockServiceMockRecorder) ProcessBook(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessBook", reflect.TypeOf((*MockService)(nil).ProcessBook), arg0)
}

// QueryBooks mocks base method.
func (m *MockService) QueryBooks(title, writer string, limit, offset int) ([]model.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryBooks", title, writer, limit, offset)
	ret0, _ := ret[0].([]model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryBooks indicates an expected call of QueryBooks.
func (mr *MockServiceMockRecorder) QueryBooks(title, writer, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryBooks", reflect.TypeOf((*MockService)(nil).QueryBooks), title, writer, limit, offset)
}

// RandomBooks mocks base method.
func (m *MockService) RandomBooks(limit int) ([]model.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RandomBooks", limit)
	ret0, _ := ret[0].([]model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RandomBooks indicates an expected call of RandomBooks.
func (mr *MockServiceMockRecorder) RandomBooks(limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RandomBooks", reflect.TypeOf((*MockService)(nil).RandomBooks), limit)
}

// Update mocks base method.
func (m *MockService) Update() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update")
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockServiceMockRecorder) Update() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockService)(nil).Update))
}

// UpdateBook mocks base method.
func (m *MockService) UpdateBook(arg0 *model.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBook", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBook indicates an expected call of UpdateBook.
func (mr *MockServiceMockRecorder) UpdateBook(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBook", reflect.TypeOf((*MockService)(nil).UpdateBook), arg0)
}

// ValidateBook mocks base method.
func (m *MockService) ValidateBook(arg0 *model.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateBook", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateBook indicates an expected call of ValidateBook.
func (mr *MockServiceMockRecorder) ValidateBook(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateBook", reflect.TypeOf((*MockService)(nil).ValidateBook), arg0)
}
