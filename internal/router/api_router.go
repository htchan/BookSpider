package router

import (
	"encoding/json"
	"errors"
	"net/http"

	"github.com/go-chi/chi/v5"
	"github.com/go-chi/cors"
	_ "github.com/htchan/BookSpider/docs" // docs is generated by Swag CLI, you have to import it.
	"github.com/htchan/BookSpider/internal/config/v2"
	"github.com/htchan/BookSpider/internal/service"
	httpSwagger "github.com/swaggo/http-swagger/v2"
)

var UnauthorizedError = errors.New("unauthorized")
var InvalidParamsError = errors.New("invalid params")
var RecordNotFoundError = errors.New("record not found")

func writeError(res http.ResponseWriter, statusCode int, err error) {
	res.WriteHeader(statusCode)
	json.NewEncoder(res).Encode(errResp{err.Error()})
}

func AddAPIRoutes(router chi.Router, conf *config.APIConfig, services map[string]service.Service, readDataServices service.ReadDataService) {
	router.Route(conf.APIRoutePrefix, func(router chi.Router) {
		router.Use(logRequest())
		router.Use(TraceMiddleware)
		router.Use(
			cors.Handler(
				cors.Options{
					AllowedOrigins: []string{"*"},
					AllowedMethods: []string{"GET", "POST", "PUT", "DELETE", "OPTIONS"},
					AllowedHeaders: []string{"*"},
					MaxAge:         300, // Maximum value not ignored by any of major browsers
				},
			),
		)

		router.Get("/info", GeneralInfoAPIHandler(services, readDataServices))

		router.Route("/sites/{siteName}", func(router chi.Router) {
			router.Use(GetReadDataServiceMiddleware(readDataServices))
			router.Get("/", SiteInfoAPIHandler)

			router.Route("/books", func(router chi.Router) {
				router.With(GetSearchParamsMiddleware).With(GetPageParamsMiddleware).Get("/search", BookSearchAPIHandler)
				router.With(GetPageParamsMiddleware).Get("/random", BookRandomAPIHandler)

				router.Route("/{idHash:\\d+(-[\\w]+)?}", func(router chi.Router) {
					// idHash format is <id>-<hash>
					router.Use(GetBookMiddleware)
					router.With().Get("/", BookInfoAPIHandler)
					router.Get("/download", BookDownloadAPIHandler)
				})
			})
		})

		router.Get("/db-stats", DBStatsAPIHandler(readDataServices))
	})

	router.Get("/docs/swagger/*", httpSwagger.WrapHandler)
}
