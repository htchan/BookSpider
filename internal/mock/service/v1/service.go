// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/htchan/BookSpider/internal/service (interfaces: Service)
//
// Generated by this command:
//
//	mockgen -destination=../mock/service/v1/service.go -package=mockservice . Service
//

// Package mockservice is a generated GoMock package.
package mockservice

import (
	context "context"
	reflect "reflect"

	model "github.com/htchan/BookSpider/internal/model"
	service "github.com/htchan/BookSpider/internal/service"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// BookInfo mocks base method.
func (m *MockService) BookInfo(arg0 context.Context, arg1 *model.Book) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BookInfo", arg0, arg1)
	ret0, _ := ret[0].(string)
	return ret0
}

// BookInfo indicates an expected call of BookInfo.
func (mr *MockServiceMockRecorder) BookInfo(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BookInfo", reflect.TypeOf((*MockService)(nil).BookInfo), arg0, arg1)
}

// CheckAvailability mocks base method.
func (m *MockService) CheckAvailability(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAvailability", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckAvailability indicates an expected call of CheckAvailability.
func (mr *MockServiceMockRecorder) CheckAvailability(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAvailability", reflect.TypeOf((*MockService)(nil).CheckAvailability), arg0)
}

// Download mocks base method.
func (m *MockService) Download(arg0 context.Context, arg1 *service.DownloadStats) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Download", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Download indicates an expected call of Download.
func (mr *MockServiceMockRecorder) Download(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Download", reflect.TypeOf((*MockService)(nil).Download), arg0, arg1)
}

// DownloadBook mocks base method.
func (m *MockService) DownloadBook(arg0 context.Context, arg1 *model.Book, arg2 *service.DownloadStats) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadBook", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DownloadBook indicates an expected call of DownloadBook.
func (mr *MockServiceMockRecorder) DownloadBook(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadBook", reflect.TypeOf((*MockService)(nil).DownloadBook), arg0, arg1, arg2)
}

// Explore mocks base method.
func (m *MockService) Explore(arg0 context.Context, arg1 *service.UpdateStats) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Explore", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Explore indicates an expected call of Explore.
func (mr *MockServiceMockRecorder) Explore(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Explore", reflect.TypeOf((*MockService)(nil).Explore), arg0, arg1)
}

// ExploreBook mocks base method.
func (m *MockService) ExploreBook(arg0 context.Context, arg1 *model.Book, arg2 *service.UpdateStats) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExploreBook", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExploreBook indicates an expected call of ExploreBook.
func (mr *MockServiceMockRecorder) ExploreBook(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExploreBook", reflect.TypeOf((*MockService)(nil).ExploreBook), arg0, arg1, arg2)
}

// Name mocks base method.
func (m *MockService) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockServiceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockService)(nil).Name))
}

// PatchDownloadStatus mocks base method.
func (m *MockService) PatchDownloadStatus(arg0 context.Context, arg1 *service.PatchStorageStats) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchDownloadStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchDownloadStatus indicates an expected call of PatchDownloadStatus.
func (mr *MockServiceMockRecorder) PatchDownloadStatus(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchDownloadStatus", reflect.TypeOf((*MockService)(nil).PatchDownloadStatus), arg0, arg1)
}

// PatchMissingRecords mocks base method.
func (m *MockService) PatchMissingRecords(arg0 context.Context, arg1 *service.UpdateStats) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchMissingRecords", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchMissingRecords indicates an expected call of PatchMissingRecords.
func (mr *MockServiceMockRecorder) PatchMissingRecords(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchMissingRecords", reflect.TypeOf((*MockService)(nil).PatchMissingRecords), arg0, arg1)
}

// Process mocks base method.
func (m *MockService) Process(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Process indicates an expected call of Process.
func (mr *MockServiceMockRecorder) Process(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockService)(nil).Process), arg0)
}

// ProcessBook mocks base method.
func (m *MockService) ProcessBook(arg0 context.Context, arg1 *model.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessBook", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessBook indicates an expected call of ProcessBook.
func (mr *MockServiceMockRecorder) ProcessBook(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessBook", reflect.TypeOf((*MockService)(nil).ProcessBook), arg0, arg1)
}

// Update mocks base method.
func (m *MockService) Update(arg0 context.Context, arg1 *service.UpdateStats) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockServiceMockRecorder) Update(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockService)(nil).Update), arg0, arg1)
}

// UpdateBook mocks base method.
func (m *MockService) UpdateBook(arg0 context.Context, arg1 *model.Book, arg2 *service.UpdateStats) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBook", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBook indicates an expected call of UpdateBook.
func (mr *MockServiceMockRecorder) UpdateBook(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBook", reflect.TypeOf((*MockService)(nil).UpdateBook), arg0, arg1, arg2)
}

// ValidateBookEnd mocks base method.
func (m *MockService) ValidateBookEnd(arg0 context.Context, arg1 *model.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateBookEnd", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateBookEnd indicates an expected call of ValidateBookEnd.
func (mr *MockServiceMockRecorder) ValidateBookEnd(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateBookEnd", reflect.TypeOf((*MockService)(nil).ValidateBookEnd), arg0, arg1)
}

// ValidateEnd mocks base method.
func (m *MockService) ValidateEnd(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateEnd", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateEnd indicates an expected call of ValidateEnd.
func (mr *MockServiceMockRecorder) ValidateEnd(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateEnd", reflect.TypeOf((*MockService)(nil).ValidateEnd), arg0)
}
