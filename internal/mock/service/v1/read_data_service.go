// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/htchan/BookSpider/internal/service (interfaces: ReadDataService)
//
// Generated by this command:
//
//	mockgen -destination=../mock/service/v1/read_data_service.go -package=mockservice . ReadDataService
//

// Package mockservice is a generated GoMock package.
package mockservice

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	model "github.com/htchan/BookSpider/internal/model"
	repo "github.com/htchan/BookSpider/internal/repo"
	gomock "go.uber.org/mock/gomock"
)

// MockReadDataService is a mock of ReadDataService interface.
type MockReadDataService struct {
	ctrl     *gomock.Controller
	recorder *MockReadDataServiceMockRecorder
	isgomock struct{}
}

// MockReadDataServiceMockRecorder is the mock recorder for MockReadDataService.
type MockReadDataServiceMockRecorder struct {
	mock *MockReadDataService
}

// NewMockReadDataService creates a new mock instance.
func NewMockReadDataService(ctrl *gomock.Controller) *MockReadDataService {
	mock := &MockReadDataService{ctrl: ctrl}
	mock.recorder = &MockReadDataServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReadDataService) EXPECT() *MockReadDataServiceMockRecorder {
	return m.recorder
}

// Book mocks base method.
func (m *MockReadDataService) Book(ctx context.Context, site, id, hash string) (*model.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Book", ctx, site, id, hash)
	ret0, _ := ret[0].(*model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Book indicates an expected call of Book.
func (mr *MockReadDataServiceMockRecorder) Book(ctx, site, id, hash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Book", reflect.TypeOf((*MockReadDataService)(nil).Book), ctx, site, id, hash)
}

// BookChapters mocks base method.
func (m *MockReadDataService) BookChapters(arg0 context.Context, arg1 *model.Book) (model.Chapters, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BookChapters", arg0, arg1)
	ret0, _ := ret[0].(model.Chapters)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BookChapters indicates an expected call of BookChapters.
func (mr *MockReadDataServiceMockRecorder) BookChapters(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BookChapters", reflect.TypeOf((*MockReadDataService)(nil).BookChapters), arg0, arg1)
}

// BookContent mocks base method.
func (m *MockReadDataService) BookContent(arg0 context.Context, arg1 *model.Book) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BookContent", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BookContent indicates an expected call of BookContent.
func (mr *MockReadDataServiceMockRecorder) BookContent(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BookContent", reflect.TypeOf((*MockReadDataService)(nil).BookContent), arg0, arg1)
}

// BookGroup mocks base method.
func (m *MockReadDataService) BookGroup(ctx context.Context, site, id, hash string) (*model.Book, *model.BookGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BookGroup", ctx, site, id, hash)
	ret0, _ := ret[0].(*model.Book)
	ret1, _ := ret[1].(*model.BookGroup)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// BookGroup indicates an expected call of BookGroup.
func (mr *MockReadDataServiceMockRecorder) BookGroup(ctx, site, id, hash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BookGroup", reflect.TypeOf((*MockReadDataService)(nil).BookGroup), ctx, site, id, hash)
}

// DBStats mocks base method.
func (m *MockReadDataService) DBStats(arg0 context.Context) sql.DBStats {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DBStats", arg0)
	ret0, _ := ret[0].(sql.DBStats)
	return ret0
}

// DBStats indicates an expected call of DBStats.
func (mr *MockReadDataServiceMockRecorder) DBStats(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DBStats", reflect.TypeOf((*MockReadDataService)(nil).DBStats), arg0)
}

// RandomBooks mocks base method.
func (m *MockReadDataService) RandomBooks(ctx context.Context, limit int) ([]model.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RandomBooks", ctx, limit)
	ret0, _ := ret[0].([]model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RandomBooks indicates an expected call of RandomBooks.
func (mr *MockReadDataServiceMockRecorder) RandomBooks(ctx, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RandomBooks", reflect.TypeOf((*MockReadDataService)(nil).RandomBooks), ctx, limit)
}

// SearchBooks mocks base method.
func (m *MockReadDataService) SearchBooks(ctx context.Context, title, writer string, limit, offset int) ([]model.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchBooks", ctx, title, writer, limit, offset)
	ret0, _ := ret[0].([]model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchBooks indicates an expected call of SearchBooks.
func (mr *MockReadDataServiceMockRecorder) SearchBooks(ctx, title, writer, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchBooks", reflect.TypeOf((*MockReadDataService)(nil).SearchBooks), ctx, title, writer, limit, offset)
}

// Stats mocks base method.
func (m *MockReadDataService) Stats(arg0 context.Context, arg1 string) repo.Summary {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stats", arg0, arg1)
	ret0, _ := ret[0].(repo.Summary)
	return ret0
}

// Stats indicates an expected call of Stats.
func (mr *MockReadDataServiceMockRecorder) Stats(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stats", reflect.TypeOf((*MockReadDataService)(nil).Stats), arg0, arg1)
}
