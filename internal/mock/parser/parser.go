// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/htchan/BookSpider/internal/parse (interfaces: Parser)
//
// Generated by this command:
//
//	mockgen -destination=../mock/parser/parser.go -package=mockparser . Parser
//

// Package mockparser is a generated GoMock package.
package mockparser

import (
	reflect "reflect"

	parse "github.com/htchan/BookSpider/internal/parse"
	gomock "go.uber.org/mock/gomock"
)

// MockParser is a mock of Parser interface.
type MockParser struct {
	ctrl     *gomock.Controller
	recorder *MockParserMockRecorder
	isgomock struct{}
}

// MockParserMockRecorder is the mock recorder for MockParser.
type MockParserMockRecorder struct {
	mock *MockParser
}

// NewMockParser creates a new mock instance.
func NewMockParser(ctrl *gomock.Controller) *MockParser {
	mock := &MockParser{ctrl: ctrl}
	mock.recorder = &MockParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParser) EXPECT() *MockParserMockRecorder {
	return m.recorder
}

// ParseBook mocks base method.
func (m *MockParser) ParseBook(html string) (*parse.ParsedBookFields, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseBook", html)
	ret0, _ := ret[0].(*parse.ParsedBookFields)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseBook indicates an expected call of ParseBook.
func (mr *MockParserMockRecorder) ParseBook(html any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseBook", reflect.TypeOf((*MockParser)(nil).ParseBook), html)
}

// ParseChapter mocks base method.
func (m *MockParser) ParseChapter(html string) (*parse.ParsedChapterFields, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseChapter", html)
	ret0, _ := ret[0].(*parse.ParsedChapterFields)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseChapter indicates an expected call of ParseChapter.
func (mr *MockParserMockRecorder) ParseChapter(html any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseChapter", reflect.TypeOf((*MockParser)(nil).ParseChapter), html)
}

// ParseChapterList mocks base method.
func (m *MockParser) ParseChapterList(html string) (*parse.ParsedChapterList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseChapterList", html)
	ret0, _ := ret[0].(*parse.ParsedChapterList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseChapterList indicates an expected call of ParseChapterList.
func (mr *MockParserMockRecorder) ParseChapterList(html any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseChapterList", reflect.TypeOf((*MockParser)(nil).ParseChapterList), html)
}
