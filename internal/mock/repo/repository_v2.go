// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/htchan/BookSpider/internal/repo (interfaces: RepositoryV2)
//
// Generated by this command:
//
//	mockgen -destination=../mock/repo/repository_v2.go -package=mockrepo . RepositoryV2
//

// Package mockrepo is a generated GoMock package.
package mockrepo

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	model "github.com/htchan/BookSpider/internal/model"
	repo "github.com/htchan/BookSpider/internal/repo"
	gomock "go.uber.org/mock/gomock"
)

// MockRepositoryV2 is a mock of RepositoryV2 interface.
type MockRepositoryV2 struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryV2MockRecorder
	isgomock struct{}
}

// MockRepositoryV2MockRecorder is the mock recorder for MockRepositoryV2.
type MockRepositoryV2MockRecorder struct {
	mock *MockRepositoryV2
}

// NewMockRepositoryV2 creates a new mock instance.
func NewMockRepositoryV2(ctrl *gomock.Controller) *MockRepositoryV2 {
	mock := &MockRepositoryV2{ctrl: ctrl}
	mock.recorder = &MockRepositoryV2MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryV2) EXPECT() *MockRepositoryV2MockRecorder {
	return m.recorder
}

// Backup mocks base method.
func (m *MockRepositoryV2) Backup(ctx context.Context, site, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Backup", ctx, site, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// Backup indicates an expected call of Backup.
func (mr *MockRepositoryV2MockRecorder) Backup(ctx, site, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Backup", reflect.TypeOf((*MockRepositoryV2)(nil).Backup), ctx, site, path)
}

// Close mocks base method.
func (m *MockRepositoryV2) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockRepositoryV2MockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRepositoryV2)(nil).Close))
}

// CreateBook mocks base method.
func (m *MockRepositoryV2) CreateBook(arg0 context.Context, arg1 *model.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBook", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBook indicates an expected call of CreateBook.
func (mr *MockRepositoryV2MockRecorder) CreateBook(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBook", reflect.TypeOf((*MockRepositoryV2)(nil).CreateBook), arg0, arg1)
}

// DBStats mocks base method.
func (m *MockRepositoryV2) DBStats(arg0 context.Context) sql.DBStats {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DBStats", arg0)
	ret0, _ := ret[0].(sql.DBStats)
	return ret0
}

// DBStats indicates an expected call of DBStats.
func (mr *MockRepositoryV2MockRecorder) DBStats(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DBStats", reflect.TypeOf((*MockRepositoryV2)(nil).DBStats), arg0)
}

// FindAllBookIDs mocks base method.
func (m *MockRepositoryV2) FindAllBookIDs(ctx context.Context, site string) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllBookIDs", ctx, site)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllBookIDs indicates an expected call of FindAllBookIDs.
func (mr *MockRepositoryV2MockRecorder) FindAllBookIDs(ctx, site any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllBookIDs", reflect.TypeOf((*MockRepositoryV2)(nil).FindAllBookIDs), ctx, site)
}

// FindAllBooks mocks base method.
func (m *MockRepositoryV2) FindAllBooks(ctx context.Context, site string) (<-chan model.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllBooks", ctx, site)
	ret0, _ := ret[0].(<-chan model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllBooks indicates an expected call of FindAllBooks.
func (mr *MockRepositoryV2MockRecorder) FindAllBooks(ctx, site any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllBooks", reflect.TypeOf((*MockRepositoryV2)(nil).FindAllBooks), ctx, site)
}

// FindBookById mocks base method.
func (m *MockRepositoryV2) FindBookById(ctx context.Context, site string, id int) (*model.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBookById", ctx, site, id)
	ret0, _ := ret[0].(*model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBookById indicates an expected call of FindBookById.
func (mr *MockRepositoryV2MockRecorder) FindBookById(ctx, site, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBookById", reflect.TypeOf((*MockRepositoryV2)(nil).FindBookById), ctx, site, id)
}

// FindBookByIdHash mocks base method.
func (m *MockRepositoryV2) FindBookByIdHash(ctx context.Context, site string, id, hash int) (*model.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBookByIdHash", ctx, site, id, hash)
	ret0, _ := ret[0].(*model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBookByIdHash indicates an expected call of FindBookByIdHash.
func (mr *MockRepositoryV2MockRecorder) FindBookByIdHash(ctx, site, id, hash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBookByIdHash", reflect.TypeOf((*MockRepositoryV2)(nil).FindBookByIdHash), ctx, site, id, hash)
}

// FindBookGroupByID mocks base method.
func (m *MockRepositoryV2) FindBookGroupByID(ctx context.Context, site string, id int) (model.BookGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBookGroupByID", ctx, site, id)
	ret0, _ := ret[0].(model.BookGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBookGroupByID indicates an expected call of FindBookGroupByID.
func (mr *MockRepositoryV2MockRecorder) FindBookGroupByID(ctx, site, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBookGroupByID", reflect.TypeOf((*MockRepositoryV2)(nil).FindBookGroupByID), ctx, site, id)
}

// FindBookGroupByIDHash mocks base method.
func (m *MockRepositoryV2) FindBookGroupByIDHash(ctx context.Context, site string, id, hashCode int) (model.BookGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBookGroupByIDHash", ctx, site, id, hashCode)
	ret0, _ := ret[0].(model.BookGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBookGroupByIDHash indicates an expected call of FindBookGroupByIDHash.
func (mr *MockRepositoryV2MockRecorder) FindBookGroupByIDHash(ctx, site, id, hashCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBookGroupByIDHash", reflect.TypeOf((*MockRepositoryV2)(nil).FindBookGroupByIDHash), ctx, site, id, hashCode)
}

// FindBooksByRandom mocks base method.
func (m *MockRepositoryV2) FindBooksByRandom(ctx context.Context, limit int) ([]model.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBooksByRandom", ctx, limit)
	ret0, _ := ret[0].([]model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBooksByRandom indicates an expected call of FindBooksByRandom.
func (mr *MockRepositoryV2MockRecorder) FindBooksByRandom(ctx, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBooksByRandom", reflect.TypeOf((*MockRepositoryV2)(nil).FindBooksByRandom), ctx, limit)
}

// FindBooksByStatus mocks base method.
func (m *MockRepositoryV2) FindBooksByStatus(ctx context.Context, status model.StatusCode) (<-chan model.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBooksByStatus", ctx, status)
	ret0, _ := ret[0].(<-chan model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBooksByStatus indicates an expected call of FindBooksByStatus.
func (mr *MockRepositoryV2MockRecorder) FindBooksByStatus(ctx, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBooksByStatus", reflect.TypeOf((*MockRepositoryV2)(nil).FindBooksByStatus), ctx, status)
}

// FindBooksByTitleWriter mocks base method.
func (m *MockRepositoryV2) FindBooksByTitleWriter(ctx context.Context, title, writer string, limit, offset int) ([]model.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBooksByTitleWriter", ctx, title, writer, limit, offset)
	ret0, _ := ret[0].([]model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBooksByTitleWriter indicates an expected call of FindBooksByTitleWriter.
func (mr *MockRepositoryV2MockRecorder) FindBooksByTitleWriter(ctx, title, writer, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBooksByTitleWriter", reflect.TypeOf((*MockRepositoryV2)(nil).FindBooksByTitleWriter), ctx, title, writer, limit, offset)
}

// FindBooksForDownload mocks base method.
func (m *MockRepositoryV2) FindBooksForDownload(ctx context.Context, site string) (<-chan model.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBooksForDownload", ctx, site)
	ret0, _ := ret[0].(<-chan model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBooksForDownload indicates an expected call of FindBooksForDownload.
func (mr *MockRepositoryV2MockRecorder) FindBooksForDownload(ctx, site any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBooksForDownload", reflect.TypeOf((*MockRepositoryV2)(nil).FindBooksForDownload), ctx, site)
}

// FindBooksForUpdate mocks base method.
func (m *MockRepositoryV2) FindBooksForUpdate(ctx context.Context, site string) (<-chan model.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBooksForUpdate", ctx, site)
	ret0, _ := ret[0].(<-chan model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBooksForUpdate indicates an expected call of FindBooksForUpdate.
func (mr *MockRepositoryV2MockRecorder) FindBooksForUpdate(ctx, site any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBooksForUpdate", reflect.TypeOf((*MockRepositoryV2)(nil).FindBooksForUpdate), ctx, site)
}

// SaveError mocks base method.
func (m *MockRepositoryV2) SaveError(arg0 context.Context, arg1 *model.Book, arg2 error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveError", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveError indicates an expected call of SaveError.
func (mr *MockRepositoryV2MockRecorder) SaveError(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveError", reflect.TypeOf((*MockRepositoryV2)(nil).SaveError), arg0, arg1, arg2)
}

// SaveWriter mocks base method.
func (m *MockRepositoryV2) SaveWriter(arg0 context.Context, arg1 *model.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveWriter", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveWriter indicates an expected call of SaveWriter.
func (mr *MockRepositoryV2MockRecorder) SaveWriter(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveWriter", reflect.TypeOf((*MockRepositoryV2)(nil).SaveWriter), arg0, arg1)
}

// Stats mocks base method.
func (m *MockRepositoryV2) Stats(ctx context.Context, site string) repo.Summary {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stats", ctx, site)
	ret0, _ := ret[0].(repo.Summary)
	return ret0
}

// Stats indicates an expected call of Stats.
func (mr *MockRepositoryV2MockRecorder) Stats(ctx, site any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stats", reflect.TypeOf((*MockRepositoryV2)(nil).Stats), ctx, site)
}

// UpdateBook mocks base method.
func (m *MockRepositoryV2) UpdateBook(arg0 context.Context, arg1 *model.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBook", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBook indicates an expected call of UpdateBook.
func (mr *MockRepositoryV2MockRecorder) UpdateBook(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBook", reflect.TypeOf((*MockRepositoryV2)(nil).UpdateBook), arg0, arg1)
}

// UpdateBooksStatus mocks base method.
func (m *MockRepositoryV2) UpdateBooksStatus(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBooksStatus", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBooksStatus indicates an expected call of UpdateBooksStatus.
func (mr *MockRepositoryV2MockRecorder) UpdateBooksStatus(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBooksStatus", reflect.TypeOf((*MockRepositoryV2)(nil).UpdateBooksStatus), arg0)
}
